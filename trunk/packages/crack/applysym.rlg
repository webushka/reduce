load crack,applysym$


%*******************************************************************%
%                                                                   %
%                    A P P L Y S Y M . T S T                        %
%                    -----------------------                        %
%  applysym.tst contains test examples to test the procedure        %
%  quasilinpde in the file applysym.red.                            %
%                                                                   %
%  Author: Thomas Wolf                                              %
%  Date:   22 May 1998                                              %
%                                                                   %
%  You need crack.red and applysym.red to run this demo.            %
%  To use other contents of the program applysym, not demonstrated  %
%  in this demo you need the program liepde.red.                    %
%                                                                   %
%  To run this demo you read in files with                          %
%     in "crack.red"$                                               %
%     in "applysym.red"$                                            %
%  or, to speed up the calculation you compile them before with     %
%     faslout "crack"$                                              %
%     in "crack.red"$                                               %
%     faslend$                                                      %
%     faslout "applysym"$                                           %
%     in "applysym.red"$                                            %
%     faslend$                                                      %
%  and then load them with                                          %
%     load crack,applysym$                                          %
%                                                                   %
%*******************************************************************%

lisp(depl!*:=nil)$

     % clearing of all dependencies
lisp(print_:=nil)$

   % to avoid printing the process of solving the char. sys.
lisp(print_more:=t)$

 % to print some verbal comments about the solution  
on dfprint$

          % to print derivatives as subscripts

COMMENT
-------------------------------------------------------
This file is supposed to provide an automatic test of
the program APPLYSYM. On the other hand the application
of APPLYSYM is an interactive process, therefore the
interested user should inspect the example described
in APPLYSYM.TEX which demonstrates the application
of symmetries to integrate a 2nd order ODE.
Here the program QUASILINPDE for integrating first
order quasilinear PDE is demonstrated.
The following equation comes up in the elimination
of resonant terms in normal forms of singularities
of vector fields (C.Herssens, P.Bonckaert, Limburgs
Universitair Centrum/Belgium, private communication);

write"-------------------"$


-------------------

lisp(print_:=nil)$



depend w,x,y,z$


quasilinpde( df(w,x)*x+df(w,y)*y+2*df(w,z)*z-2*w-x*y,  w,  {x,y,z} )$


The quasilinear PDE:  0 = w *x + w *y + 2*w *z - 2*w - x*y.
                           x      y        z

The general solution of the PDE is given through

         - log(z)*x*y + 2*w   sqrt(z)*y   sqrt(z)*x
0 = ff(---------------------,-----------,-----------)
                 z                z           z

with arbitrary function ff(..).

nodepend w,x,y,z$



COMMENT
-------------------------------------------------------
The result means that w is defined implicitly through 

        x*y    - log(z)*x*y + 2*w      y              
0 = ff(-----,---------------------,---------)         
         z             z            sqrt(z)           

with an arbitrary function ff of 3 arguments. As the PDE
was linear, the arguments of ff are such that we can 
solve for w:                                   

                        x*y      y             
w = log(z)*x*y/2 + z*f(-----,---------)        
                         z    sqrt(z)          

with an arbitrary function f of 2 arguments.
-------------------------------------------------------
The following PDEs are taken from E. Kamke,
Loesungsmethoden und Loesungen von Differential-
gleichungen, Partielle Differentialgleichungen
erster Ordnung, B.G. Teubner, Stuttgart (1979);


write"-------------------"$


-------------------
% equation 1.4 ----------------------
lisp(depl!*:=nil)$


depend z,x,y$


quasilinpde( x*df(z,x)-y, z, {x,y})$


The quasilinear PDE:  0 = z *x - y.
                           x

The general solution of the PDE is given through

0 = ff(log(x)*y - z,y)

with arbitrary function ff(..).

write"-------------------"$


-------------------
% equation 2.5 ----------------------
lisp(depl!*:=nil)$


depend z,x,y$


quasilinpde( x**2*df(z,x)+y**2*df(z,y), z, {x,y})$


                              2       2
The quasilinear PDE:  0 = z *x  + z *y .
                           x       y

The general solution of the PDE is given through

        x - y
0 = ff(-------,z)
         x*y

with arbitrary function ff(..).

write"-------------------"$


-------------------
% equation 2.6 ----------------------
lisp(depl!*:=nil)$


depend z,x,y$


quasilinpde( (x**2-y**2)*df(z,x)+2*x*y*df(z,y), z, {x,y})$


                              2       2
The quasilinear PDE:  0 = z *x  - z *y  + 2*z *x*y.
                           x       x         y

The general solution of the PDE is given through

           2    2
          x  + y
0 = ff(z,---------)
             y

with arbitrary function ff(..).

write"-------------------"$


-------------------
% equation 2.7 ----------------------
lisp(depl!*:=nil)$


depend z,x,y$


quasilinpde( (a0*x-a1)*df(z,x)+(a0*y-a2)*df(z,y), z, {x,y})$


The quasilinear PDE:  0 = z *a0*x - z *a1 + z *a0*y - z *a2.
                           x         x       y         y

The general solution of the PDE is given through

         a1*y - a2*x
0 = ff(---------------,z)
                    2
        a0*a1*x - a1

with arbitrary function ff(..).

write"-------------------"$


-------------------
% equation 2.14 ---------------------
lisp(depl!*:=nil)$


depend z,x,y$


quasilinpde( a*df(z,x)+b*df(z,y)-x**2+y**2, z, {x,y})$


                                         2    2
The quasilinear PDE:  0 = z *a + z *b - x  + y .
                           x      y

The general solution of the PDE is given through

        2  3            2      3        2  2      2  3
0 = ff(a *y  - 3*a*b*x*y  - 3*b *z + 3*b *x *y - b *y ,a*y - b*x)

with arbitrary function ff(..).

write"-------------------"$


-------------------
% equation 2.16 ---------------------
lisp(depl!*:=nil)$


depend z,x,y$


quasilinpde( x*df(z,x)+y*df(z,y)-a*x, z, {x,y})$


The quasilinear PDE:  0 = z *x + z *y - a*x.
                           x      y

The general solution of the PDE is given through

                x
0 = ff(a*x - z,---)
                y

with arbitrary function ff(..).

write"-------------------"$


-------------------
% equation 2.20 ---------------------
lisp(depl!*:=nil)$


depend z,x,y$


quasilinpde( df(z,x)+df(z,y)-a*z, z, {x,y})$


The quasilinear PDE:  0 = z  + z  - a*z.
                           x    y

The general solution of the PDE is given through

         z
0 = ff(------,x - y)
         a*x
        e

with arbitrary function ff(..).

write"-------------------"$


-------------------
% equation 2.21 ---------------------
lisp(depl!*:=nil)$


depend z,x,y$


quasilinpde( df(z,x)-y*df(z,y)+z, z, {x,y})$


The quasilinear PDE:  0 = z  - z *y + z.
                           x    y

The general solution of the PDE is given through

        x    x
0 = ff(e *z,e *y)

with arbitrary function ff(..).

write"-------------------"$


-------------------
% equation 2.22 ---------------------
lisp(depl!*:=nil)$


depend z,x,y$


quasilinpde( 2*df(z,x)-y*df(z,y)+z, z, {x,y})$


The quasilinear PDE:  0 = 2*z  - z *y + z.
                             x    y

The general solution of the PDE is given through

        x/2    x/2
0 = ff(e   *z,e   *y)

with arbitrary function ff(..).

write"-------------------"$


-------------------
% equation 2.23 ---------------------
lisp(depl!*:=nil)$


depend z,x,y$


quasilinpde( a*df(z,x)+y*df(z,y)-b*z, z, {x,y})$


The quasilinear PDE:  0 = z *a + z *y - b*z.
                           x      y

The general solution of the PDE is given through

           z        y
0 = ff(----------,------)
         (b*x)/a    x/a
        e          e

with arbitrary function ff(..).

write"-------------------"$


-------------------
% equation 2.24 ---------------------
lisp(depl!*:=nil)$


depend z,x,y$


quasilinpde( x*(df(z,x)-df(z,y))-y*df(z,y), z,{x,y})$


The quasilinear PDE:  0 = z *x - z *x - z *y.
                           x      y      y

The general solution of the PDE is given through

        2
0 = ff(x  + 2*x*y,z)

with arbitrary function ff(..).

write"-------------------"$


-------------------
% equation 2.25 ---------------------
lisp(depl!*:=nil)$


depend z,x,y$


quasilinpde( x*df(z,x)+y*df(z,y)-az, z, {x,y})$


The quasilinear PDE:  0 = z *x + z *y - az.
                           x      y

The general solution of the PDE is given through

          y       x
0 = ff(-------,-------)
         z/az    z/az
        e       e

with arbitrary function ff(..).

write"-------------------"$


-------------------
% equation 2.26 ---------------------
lisp(depl!*:=nil)$


depend z,x,y$


quasilinpde( x*df(z,x)+y*df(z,y)-z+x**2+y**2-1, z, {x,y})$


                                         2    2
The quasilinear PDE:  0 = z *x + z *y + x  + y  - z - 1.
                           x      y

The general solution of the PDE is given through

         2    2
        x  + y  + z + 1   x
0 = ff(-----------------,---)
               y          y

with arbitrary function ff(..).

write"-------------------"$


-------------------
% equation 2.39 ---------------------
lisp(depl!*:=nil)$


depend z,x,y$


quasilinpde( a*x**2*df(z,x)+b*y**2*df(z,y)-c*z**2, z, {x,y})$


                                2         2      2
The quasilinear PDE:  0 = z *a*x  + z *b*y  - c*z .
                           x         y

The general solution of the PDE is given through

         - b*y + c*z   a*x - b*y
0 = ff(--------------,-----------)
            y*z           x*y

with arbitrary function ff(..).

write"-------------------"$


-------------------
% equation 2.40 ---------------------
lisp(depl!*:=nil)$


depend z,x,y$


quasilinpde( x*y**2*df(z,x)+2*y**3*df(z,y)-2*(y*z-x**2)**2, z,
             {x,y})$


                                2         3      4      2          2  2
The quasilinear PDE:  0 = z *x*y  + 2*z *y  - 2*x  + 4*x *y*z - 2*y *z .
                           x           y

The general solution of the PDE is given through

                   4           2        2
         - log(y)*x  + log(y)*x *y*z + y *z      x
0 = ff(-------------------------------------,---------)
                     4    2                   sqrt(y)
                    x  - x *y*z

with arbitrary function ff(..).

write"-------------------"$


-------------------
% equation 3.12 ---------------------
lisp(depl!*:=nil)$


depend w,x,y,z$


quasilinpde( x*df(w,x)+(a*x+b*y)*df(w,y)+(c*x+d*y+f*z)*df(w,z), w,
             {x,y,z})$


The quasilinear PDE:  0 = w *x + w *a*x + w *b*y + w *c*x + w *d*y + w *f*z.
                           x      y        y        z        z        z

The general solution of the PDE is given through

                                                                2
         - a*d*x + b*c*x + b*f*z - b*z - c*f*x - d*f*y + d*y - f *z + f*z
0 = ff(-------------------------------------------------------------------,
                           f        f      f  2    f
                          x *b*f - x *b - x *f  + x *f

        a*x + b*y - y
       ---------------,w)
           b      b
          x *b - x

with arbitrary function ff(..).

write"-------------------"$


-------------------
% end -------------------------------

lisp(depl!*:=nil)$


end$


                       Fetching and Building REDUCE
                       ============================


The prerequisites for using this package will depend somewhat on whether
you choose to use the CSL or PSL build. At present the PSL one is provided
in the form of ready-to-run architecture-specific binaries and so the
development environment for rebuilding those is not needed. For CSL you need
to be able to compile both CSL itself and the FOX toolkit on which it depends.
   For Windows, the "cygwin" environment providing a "bash" shell.
       Note that mingw/msys is not supported.
   GNU make (other versions of "make" are not liable to work), autoconf
       and automake.
   For CSL you need a C/C++ development context. On Windows you
       need the "mingw" compiler variants from cygwin while on other systems
       you need X11 and other development capability, including Xft,
       fontconfig, (n)curses, Posix threads. For building for 64-bit windows
       you should check http://sourceforge.net/projects/mingw-w64/ and ensure
       you have cross-tools with a name such as x88_64-w64-mingw32-gcc (and
       all associated tools, libraries and utilities). Please use the
       cygwin hostable versions that use Unix-style path-names.
       NEWS: September 2010. The cygwin installer can now install a set
       of 64-bit MinGW compilers for you, and the scripts etc here will
       now assume that these are the ones you use. This makes it MUCH easier
       for everybody to support 64-bit windows, so Thank You to both the
       MinGW64 team and to cygwin for incorporating in via their distribution.

If you try to build REDUCE but one of the programming tools or development
libraries that is required is not available then there is no guarantee that
the failure that results will describe itself to you clearly. Maybe some day
somebody will try creating a "check configuration" script that can be used to
pre-check what is available, what is needed and what is optional but desirable.
In the meanwhile the first time you try a build if things fail start by looking
for evidence (eg in the logs) that something is missing. For a range of the
tools (eg autoconf, libtool etc) if you can not identify a ready-built binary
package that suits your environment it will be easy to build one from sources
found "at the usual places".



You can fetch or update REDUCE in one of (at least) two ways

(1) Fetch a file named openreduce.tar.bz2 (which ought to be the latest
version available on the site you fetch from) or openreduce-yymmdd.tar.bz2
where yy is a year, mm a month and dd a day. For instance the file
openreduce-081119.tar.bz2 would be one for November 19th, 2008.
Unpack the file and you should get a directory whose name includes a
date-code. This is done so that unpacking a new archive does not merely
overwrite and earlier version that you had. Copy, link or rename this
directory so you have one with a name of your choice. For the purposes
of this document I will suppose it ends up called $HOME/openreduce, but any
name ought to work as well.

OR

(2) Use subversion to fetch or refresh a copy from the master site.

svn checkout
  https://reduce-algebra.svn.sourceforge.net/svnroot/reduce-algebra
  reduce-algebra
(all the above three lines really stand for one long line of input)

    That should create a directory called "reduce-algebra" for you.
    To refresh your files, enter the reduce-algebra directory and go
        svn update
    Note that the main copy of everything will end up in the "trunk"
    sub-directory of what you fetch.




The simplest way version of the build process is to select the directory
where REDUCE was unpacked as current and issue one of the command
         ./configure --with-csl
     OR  ./configure --with-psl

Follow that by the command "make" and if all goes well everything relevant
will be compiled.

For (some sort of) convenience a script "rebuild.sh" in the top level of
the distribution tries to do this for both PSL and CSL and it then leaves
overall log files also at the top level.

[In the CSL case only at present, but I will fix that in a bit] You can then
run REDUCE using the command
    bin/reduce

[At present I do not in any way guarantee (and I probably do not even expect)
that the usual "configure" option "--prefix=..." or the idiom "make install"
will behave as you might have hoped.]

The first time you go bin/reduce it will arrange to set up either a symbolic
link or a short script in the bin directory (replacing the initial version
that performs this action). This script or link can probably be copied to any
location you view as convenient (eg somewhere on your PATH) and will continue
to refer to the place where REDUCE was built.

When you build, a collection of log files are placed within either the
psllogs or csllogs sub-directory. If anything seems to have gone wrong
that is where you will need to look to find additional information.



The setup of this project allows for use of multiple computer architectures
and for sub-variant build options an a single architecture. The nature of
the computer on which building is performed is detected automatically and
all binaries and all logs are placed in directories whose names include
that. Thus files might be make in a directory with such as
         pslbuild/x86_64-unknown-opensuse-11.0
     OR  cslbuild/i686-pc-windows
Part of the purpose of this is so that in a case where a user's file-space is
on a network file-server of some sort and they connect to that using a variety
of computers the builds for each computer used do not conflict.
[At least at present the mechanism in the "bin" directory detects the
architecture in force the first time you try to launch REDUCE and does not
adapt if you switch architectures later on]

There are a number of optional ways in which configuration may be customised:
         ./configure --with-csl --enable-debug
   Enable "gcc -g" compilation of the C parts of CSL so that gdb can be
   used to debug things.

         ./configure --with-csl --with-m32
   On an architecture that is basically 64-bit (mostly 64-bit Linux) this
   arranges to compile 32-bit binaries. As in "gcc -m32". Similarly
   "--with-m64" exists.
 
         ./configure --with-csl --with-mingw64
   Provided a cross compiler x86_64-win64-mingw32-gcc is available (plus all
   associated tools - see the site at sourceforge where that compiler
   is being developed) this EXPERIMENTALLY build a 64-bit Windows system.
   As of September 2010 the MinGW64 toolchain from sourceforge seems pretty
   stable. Note that you NEED to use the version that hosts on Cygwin
   not the one for Msys, since the gnu autotools etc do not play prettily
   with Windows-style file-names and paths. Swee the note at the top to the
   effect that this toolchain can now be installed as part of your cygwin
   setup so you do not have to download it from sourceforge and install it
   yourself! 

         ./configure --with-csl --with-cygwin
   Normally the CSL build on a Windows platform builds a normal native Windows
   binary using "mingw32". "--with-cygwin" causes it to build a "cygwin"
   system that expects to use X-windows rather than a native Windows GUI,
   and that links in the cygwin1.dll library which imposes some additional
   license constraints.

         ./configure --with-psl --with-m32
   As "--with-m32" for CSL, this used 32-bit PSL even if you are in a
   64-bit-capable environment.




Having built the system [in the CSL world] you can go
         make testall
and that will run the full set of REDUCE test scripts, leaving some output
in the log directory. [With CSL] This also compares the test output with
reference logs held in the main source tree and provides a summary of
differences, and prepares a table comparing the performance of the current
computer the the one used to create the reference logs.




Developers and some more ambitious users may need to understand the
directory layout in more detail.  The main directories supplied are
as follows, where MACHINE stands for a machine identification, eg
i686-pc-windows-debug.

 trunk                    The main version of everything
   bin                    Scripts to launch REDUCE etc
   csl/cslbase            Main CSL Lisp sources
       fox                the FOX GUI toolkit, an LGPL package
   cslbuild/generated-c   Part of REDUCE compiled into C
            MACHINE/csl   where REDUCE binaries are built
                    fox   where the FOX GUI toolkit is built
   csllogs/MACHINE/build  logs from building REDUCE
                   test   logs from testing REDUCE
   packages/alg           REDUCE sources, on package per directory
            ...
            ztrans
   psl/psl-amd64          Ready-build binaries of the PSL Lisp system ...
       ...                ...
       psl/win32          ... for a variety of architectures
   pslbuild/MACHINE/.     where REDUCE gets built
                    psl   copy of relevant architecture-specific PSL
                    red   REDUCE built binary "fasl" and image files
                    deps  used to record dependencies in the build
   psllogs/build          logs from building REDUCE
           test           logs from testing REDUCE
   scripts                scripts used to maintain the system.



If you are working on just one platform and have completed the configuration
and done an initial build you may like to select either cslbuild/MACHINE/csl
or pslbuild/MACHINE as your current directory: the Makefile that ends up there
is the main one used for rebuilding the system.



A C Norman. July 2008. Updated Jan 2009, September 2010



